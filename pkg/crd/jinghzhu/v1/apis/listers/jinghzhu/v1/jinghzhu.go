/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/jinghzhu/KubernetesCRD/pkg/crd/jinghzhu/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JinghzhuLister helps list Jinghzhus.
type JinghzhuLister interface {
	// List lists all Jinghzhus in the indexer.
	List(selector labels.Selector) (ret []*v1.Jinghzhu, err error)
	// Jinghzhus returns an object that can list and get Jinghzhus.
	Jinghzhus(namespace string) JinghzhuNamespaceLister
	JinghzhuListerExpansion
}

// jinghzhuLister implements the JinghzhuLister interface.
type jinghzhuLister struct {
	indexer cache.Indexer
}

// NewJinghzhuLister returns a new JinghzhuLister.
func NewJinghzhuLister(indexer cache.Indexer) JinghzhuLister {
	return &jinghzhuLister{indexer: indexer}
}

// List lists all Jinghzhus in the indexer.
func (s *jinghzhuLister) List(selector labels.Selector) (ret []*v1.Jinghzhu, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Jinghzhu))
	})
	return ret, err
}

// Jinghzhus returns an object that can list and get Jinghzhus.
func (s *jinghzhuLister) Jinghzhus(namespace string) JinghzhuNamespaceLister {
	return jinghzhuNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JinghzhuNamespaceLister helps list and get Jinghzhus.
type JinghzhuNamespaceLister interface {
	// List lists all Jinghzhus in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.Jinghzhu, err error)
	// Get retrieves the Jinghzhu from the indexer for a given namespace and name.
	Get(name string) (*v1.Jinghzhu, error)
	JinghzhuNamespaceListerExpansion
}

// jinghzhuNamespaceLister implements the JinghzhuNamespaceLister
// interface.
type jinghzhuNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Jinghzhus in the indexer for a given namespace.
func (s jinghzhuNamespaceLister) List(selector labels.Selector) (ret []*v1.Jinghzhu, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.Jinghzhu))
	})
	return ret, err
}

// Get retrieves the Jinghzhu from the indexer for a given namespace and name.
func (s jinghzhuNamespaceLister) Get(name string) (*v1.Jinghzhu, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("jinghzhu"), name)
	}
	return obj.(*v1.Jinghzhu), nil
}
